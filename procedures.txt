


###Defines initial surface with a certain height and boundary circle radius
procedure prod1 (real radius, real height)
{
   RMAX := radius;
   ZMAX := 0.5*height;
   g3;
}


###Evolves a catenoid simply
procedure prod2 (real radius, real height)
{
   RMAX := radius;
   ZMAX := 0.5*height;
   g 3;
   r;
   u;
   g 120;
   r;
   g 300;
}


###Evolves a catenoid in a smarter way
procedure prod3 (real radius, real height)
{
   RMAX := radius;
   ZMAX := 0.5*height;
   g 3;
   r;
   u;
   do {oldarea := total_area; g 50 } while (oldarea - total_area > 1e-5);
   r;
   do {oldarea := total_area; g 50 } while (oldarea - total_area > 1e-5);
}


###Similar to prod3 but with a for loop
procedure prod4 (real radius, real height)
{
   RMAX := radius;
   ZMAX := 0.5*height;
   g 3;
   r;
   u;
   do {oldarea := total_area; g 50 } while (oldarea - total_area > 1e-5);

   for (ind := 1 ; ind < 3 ; ind++)
   	r;
	do {oldarea := total_area; g 50 } while (oldarea - total_area > 1e-5);
}

###Similar to prod4 but allows the user to choose whether collapse
###should be initiated or not
procedure prod5 (real radius, real height, integer collapse)
{
   RMAX := radius;
   ZMAX := 0.5*height;
   g 3;
   r;
   u;
   do {oldarea := total_area; g 50 } while (oldarea - total_area > 1e-5);

   if (collapse == 1) then {t 0.05; o; g 10};

   for (ind := 1 ; ind < 3 ; ind++)
   	r;
	do {oldarea := total_area; g 50 } while (oldarea - total_area > 1e-5);
   
}

###Same as prod5, but looser tolerance for when evolving should end
procedure prod6(real radius, real height, integer collapse)
{
   RMAX := radius;
   ZMAX := 0.5*height;
   tol := ((1e-5)/8)*radius*radius;
   g 3;
   r;
   u;
   do {oldarea := total_area; g 50 } while (oldarea - total_area > tol);

   if (collapse == 1) then {t 0.05; o; g 10};

   for (ind := 1 ; ind < 3 ; ind++)
   	r;
	do {oldarea := total_area; g 50 } while (oldarea - total_area > tol);
   
}



###For a given radius, starts with a height that certainly will give an unstable catenoid
###and decrease height until a stable catenoid is found. Returns the smallest height that
###gives an unstable catenoid. Can use prod5 or prod6 depending on how fast the evolving
###should be.
procedure prod7(real radius)
{
	replace_load datafilename;
	
	goldschmidt_area := 2*3.14159*radius*radius;
	height := 1.2965*radius;

	while 1 do {
	
		prod6(radius,height,1);
		if (total_area < 1.1*goldschmidt_area) then {
			height := height-0.001; replace_load datafilename} else {
					printf "###Maximum height for a stable catenoid of radius %.3f: \n", radius;
					printf "%.3f \n", (height+0.001); BREAK};
		
		}

}

###Same as prod7 but with larger increments at each iteration, making it faster
procedure prod8(real radius)
{
	replace_load datafilename;
	
	goldschmidt_area := 2*3.14159*radius*radius;
	height := 1.2965*radius;
	increment := 0.000125*radius;

	while 1 do {
	
		prod6(radius,height,1);
		if (total_area < 1.1*goldschmidt_area) then {
			height := height-increment; replace_load datafilename} else {
					printf "###Maximum height for a stable catenoid of radius %.3f: \n", radius;
					printf "%.3f \n", (height+0.001); BREAK};
		
		}

}


