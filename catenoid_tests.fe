// catenoid.fe
// Evolver data for catenoid.


PARAMETER  RMAX = 1.55
PARAMETER  ZMAX = 1.0




boundary 1 parameters 1     //  upper ring
x1:  RMAX * cos(p1)
x2:  RMAX * sin(p1)
x3:  ZMAX

boundary 2 parameters 1    //   lower ring
x1:  RMAX * cos(p1)
x2:  RMAX * sin(p1)
x3:  -ZMAX

vertices   // given in terms of boundary parameter
1    0.00  boundary 1   fixed
2    pi/3  boundary 1   fixed
3  2*pi/3  boundary 1   fixed
4    pi    boundary 1   fixed
5  4*pi/3  boundary 1   fixed
6  5*pi/3  boundary 1   fixed
7    0.00  boundary 2   fixed
8    pi/3  boundary 2   fixed
9  2*pi/3  boundary 2   fixed
10   pi    boundary 2   fixed
11 4*pi/3  boundary 2   fixed
12 5*pi/3  boundary 2   fixed

edges
1    1  2  boundary 1   fixed
2    2  3  boundary 1   fixed
3    3  4  boundary 1   fixed
4    4  5  boundary 1   fixed
5    5  6  boundary 1   fixed
6    6  1  boundary 1   fixed
7    7  8  boundary 2   fixed
8    8  9  boundary 2   fixed
9    9  10 boundary 2   fixed
10   10 11 boundary 2   fixed
11   11 12 boundary 2   fixed
12   12 7  boundary 2   fixed
13   1  7
14   2  8
15   3  9
16   4  10
17   5  11
18   6  12

faces
1   1 14 -7 -13
2   2 15 -8 -14
3   3 16 -9 -15
4   4 17 -10 -16
5   5 18 -11 -17
6   6 13 -12 -18


read

procedure prod1 (real radius, real height)
{
   RMAX := radius;
   ZMAX := 0.5*height;
   g3;
}

procedure prod5 (real radius, real height, integer collapse)
{
   RMAX := radius;
   ZMAX := 0.5*height;
   g 3;
   r;
   u;
   do {oldarea := total_area; g 50 } while (oldarea - total_area > 1e-5);

   if (collapse == 1) then {t 0.05; o; g 10};

   for (ind := 1 ; ind < 3 ; ind++)
   	r;
	do {oldarea := total_area; g 50 } while (oldarea - total_area > 1e-5);
   
}

procedure prod6(real radius, real height, integer collapse)
{
   RMAX := radius;
   ZMAX := 0.5*height;
   tol := ((1e-5)/8)*radius*radius;
   g 3;
   r;
   u;
   do {oldarea := total_area; g 50 } while (oldarea - total_area > tol);

   if (collapse == 1) then {t 0.05; o; g 10};

   for (ind := 1 ; ind < 3 ; ind++)
   	r;
	do {oldarea := total_area; g 50 } while (oldarea - total_area > tol);
   
}

procedure prod7(real radius)
{
	replace_load datafilename;
	
	goldschmidt_area := 2*3.14159*radius*radius;
	height := 1.2965*radius;

	while 1 do {
	
		prod6(radius,height,1);
		if (total_area < 1.1*goldschmidt_area) then {
			height := height-0.001; replace_load datafilename} else {
					printf "###Maximum height for a stable catenoid of radius %.3f: \n", radius;
					printf "%.3f \n", (height+0.001); BREAK};
		
		}

}


procedure prod8(real radius)
{
	replace_load datafilename;
	
	goldschmidt_area := 2*3.14159*radius*radius;
	height := 1.2965*radius;
	increment := 0.000125*radius;

	while 1 do {
	
		prod6(radius,height,1);
		if (total_area < 1.1*goldschmidt_area) then {
			height := height-increment; replace_load datafilename} else {
					printf "###Maximum height for a stable catenoid of radius %.3f: \n", radius;
					printf "%.3f \n", (height+0.001); BREAK};
		
		}

}



// Procedures:
// prod5(radius, height, show collapse)    (show collapse = 1 for yes, 0 for no)
// Evolves a catenoid of given radius and height 
//
// prod6(radius, height, show collapse)
// Same as prod5 but with lower tolerance, so it evolves faster
//
// prod7(radius)
// Finds the maximum height of a stable catenoid with the given radius 
//
// prod8(radius)
// Same as prod7 but with larger increments at each iteration making it faster
//
// Brug "set facets color x" til at skifte farve (virker for x mellem 1 og 15. -1 giver
// transparent)


s
